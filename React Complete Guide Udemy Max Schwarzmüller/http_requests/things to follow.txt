* Secure your API keys -> whitelist only a set of IPs, through which API key can be used.

* Don't store any sensitive user info in the frontend.

* NOTE - Minification is only a performance enhancement, it doesn't secure our frontend in any way.

* Note - REST API ki problem ye he ki usme sara data ek sath aa jata he, meaning we fetch more than what we need. An advantage of REST API is that it's pretty clear in the sense that we GET from 1 endpoint, POST from another etc.

* GraphQL API kafi specific data provide karti he.

* Agr per page of app zyada data ni chahiye sirf specific data chahiye and bandwidth needs to be conserved then GraphQL API are better. And if per page bohot sara data chahiye to REST API are better.

* Note - 
-> Axios is a npm package through which we can send http requests.
-> Fetch API is built into browser (so, it doesn't require a seperate package), using this we can send http requests.

// Status Codes
* 2xx -> sucess
* 4xx, 5xx -> failure

* 200 -> success
* 400 -> bad request
* 403 -> forbidden
* 404 -> not found

* useEffect() ka function async ni ho sakta, uske andar mai async func. ko call zaroor kar sakta hu.

* try catch ke andar agr async function call hota he aur wo error throw karta he to catch block usse catch ni kar payega kyoki promise resovle hone ka wait thodi na karega compiler wo to agge bad jaega aur phir jab wo promise return hoga aur manlo fail hogya to to mai catch block etc ke bahar aa chuka honga. To handle this situation either we can await for the promise of the async function to return OR we can simply handle the promise and error using func_call().catch();

* PUT request se backend pai data overwrite hota he, POST mai sirf add hota he overwrite ni.