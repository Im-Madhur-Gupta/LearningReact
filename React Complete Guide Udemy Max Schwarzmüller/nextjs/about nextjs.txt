* Next.js is a Framework that uses React as a library.

* Next.js gives me some imp features (makes life easy) - 
1. File based routing
2. Page pre-rendering
3. Data fetching and adding APIs

* Its a Framework that is used to make Fullstack, Production apps.

* React is just a frontend library.

* Key features of Next js -

1. Built-in Server-Side Rendering -
* React ek frontend library he to jo bhi processing/execution/rendering hoti he JS code ki wo sara ka sara frontend pai hota he. To frontend pai react code execute hoga uske hisab se display hoga phir manlo kuch request bhejni he api ko to phir wo hogi.
* To server se jo content aya wo to basically simple sa html code tha "root" id wala.
* Fir sara execution browser mai hua.
* So, user ko content load hone ke liye in sab cheezo ke hone ka wait karna padega.
** This is a problem from SEO perspective as well, kyoki search engine crawlers to sirf wo initial html code hi dekh payenge.
* Server-side rendering se apn request ane par rendered pages server se front end ko bhej dete he. To frontend pe execution time bach jaega.


2. File-based Routing
* Routing ka built-in support he, "pages" name ke folder ki madad se.
* Its like simple html pages wali routing jinmai multiple html files hoti thi jo correspond karti thi various routes se.


3. Gives me full stack capabilities -
* Asani se mai backend (nodejs) code likh sakta hu nextjs ki madad se.


* Next js ke public folder mai index.html ni milegi kyoki next js supports page pre-rendering. (Detail mai dekhenge isse).


* Page based routing in Next js -
1. Agr request "/" pe ayegi to index.js serve hoga. "/news" pai request ayi to news.js serve hoga.
(When files are directly inside the pages folder)

2. Nested Routes -
* Ismai mai pages folder ke andar sub folders banata hu,
Maine pages ke andar "news" name ka folder banaya to news folder ke andar ki index.js will be rendered at "/news"
news folder ke andar kuch newsitem.js banai to wo render hogi at "/news/newsitem"

* Jitni chaho utni nesting kar sakte he, folder ke andar folder ... 

3. Dynamic Pages -
dynamic page banane ke liye following syntax use karenge -
[identifier_name].js
phir ye parameter ie. identifier_name use kar sakte he is file ke andar aur us hisab se dynamically render kar sakte he page ko.
-> Ab ye dynamic value access karne ke liye mai useRouter hook use karunga from "next/router".
-> useRouter() se jo object milega that contains certain methods and data about the URL, like programatic navigation, data like the variable identifier which we provided in the URL for the dynamic page.
-> useRouter() se router object jo mila uske pass "query" parameter hota he, jiske pass mere identifier ki value hoti he under a key identifier_name (jo bhi rakhi thi) -
router.query.identifier_name
-> useRouter ke barre mai thoda specific - useRouter apne app by default chal jata he lekin tab url ni aya hota he to wo undefined dedeta he .query.____ ko. Phir url jab aa jata he to sahi value deta he. This is the default nehaviour of useRouter hook.

Note - A small prob - .eslintrc.json mai ye hona chahiye -
{
    "extends": ["next/babel","next/core-web-vitals"]
}

* Same wahi cheez React wali ki seedha anchor tag mat use karna usse page refresh ho jata he. Instead use the Link component from "next/link". Ye Link component ko href prop dete he jismai pura URL ana chahiye jaha bhejna chahta hu.