* To initialize a frontend only (no server-side processing) React app -
npx create-react-app {react_app_name}

* react project me jo file sabse pehle execute hoti he wo index.js he.

* we cannot import css files into vanilla js.

* Typically, using react we can only make single page applications, ie we generate a single HTML file.

* React components ke name should start with capital letters, tabhi React pakad payega ki its a React component, small me noraml html components hote he.

* JSX - JavaScript XML

* React Components are basically custom HTML elements

* Follow the style of writing 1 component per file.

* App component is called Root Component as all the other components will be nested inside of it.

* A component in React is either a JS function or JS class.

* The JSX of all components should be enclosed in a parent block level element (generally we use div). This is bcz all JSX code gets converted to React.createElement() calls, which we will return and we can only return 1 thing / 1 React.createElement() at a time.

* Mujhe apne react components me css files ko import karna padta he taki wo rendering ke time implement ho jae.

* Revision - JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects contain a Number that represents milliseconds since 1 January 1970 UTC.

* create date object - let date = new Date()
* create date string - let dateStr = Date()

* JSX ke andar JS use karna he to {} use karte he. Par iske andar mai block statememts (like if-else) use ni kar sakta, if else ki jagah ternary use kar sakte he.



* IMPORTANT - Wrapper Components like a Card jiske andar mai dusre React comps dalunga, they don't work out of the box. Agr wrapper comp ke andar sirf html tags hote to chal jata. 
* To agr kisi Wrapper React Component ke opening tag and closing tag ke beech koi React comp dalna he to will have to use {props.children} between the wrapper's root <div>.

* children is a prop that is passed implicitly, it basically contains all the children contained by the wrapper from the place its being displayed.

* similarly, className is a prop that is implicitly passed, it contains all the class names suplied from the place where the component is being displayed. So we can attach all the class names supplied using className = {props.className}


* All components ultimately end up as our good-old html elements.

* JSX gets broken down to a bunch of React.createElement() calls.

* React.createElement(name of the element we have to make, its attributes, what should be inside of it)
* The name would be in quotes for a std html element, but as it is for a React Component.

* In React I make a component tree which gets inserted into a single root node in the DOM. Is single root node me kai sare components nested hote he.

* Props are basically custom HTML attributes.

* In React we can tranfer data from -
1. Parent to Child using props.
2. Child to parent using a custom event handler (basics\ExpenseForm.js line 63).
** Direct Child to Child data transfer is not possible.

* onChange event listner works for all types of input fields text, date, number, dropdown etc.

* To add a default value to select tag use its "defaultValue" or "value" attribute and then give it the default value. (basics\ExpensesFilter.js line 11).

* Types of Components -
1. Stateless / Presentational / Dumb Component - Aisa component jisme state management na ho raha ho / state hook use ni kiya ho. just there to output some data.
2. Stateful / Smart Component - Aisa component jisme state management ho raha ho / state hook use kiya ho.

* A general thing is that stateless components are more in number than stateful component.

* JSX code me agr { [component1, component2, ...] } aesa likh diya to React will render these components present in the array side by side.

* We should always use "key" ppt whenever we are rendering a list of items. (Expenses.js)

* Jab bhi aisa kuch karna ho like ki certain variables ka jab state change hoga tab tab mujhe kuch peice of code re-run karna he to mai useEffect hook use karunga.

* We can store JSX code in variables.

* JSX ki limitation ye he ki usse hamesha EK parent element (ya EK expression) chahiye hota he return me (This is NOT a req. of the DOM). cuz it gets translated into React.createElement calls. To overcome this we can -
1. wrap whatever we want to return in a div (or any element/React Component). React component me simply mujhe props.children return karwana he. This is fine but it creates uneccessary divs/elements.
2. return an array of JSX components/elements.
3. USE REACT FRAGMENTS - Ye simply props.children ko return kar deta he. JSX wali condition fullfill and NO uneccessary elements are now being rendered.
<React.Fragment> </React.Fragment>
OR
<> </> (Best)

* Modals, side drawers, any overlay shouldn't be nested with other elements/components as they are to be rendered above them not with them. nest karke proper styling ke sath aisa lagega ki wo upar aa gaya he baki elements ke but SEMANTICALLY its NOT correct. To overcome this issue we use React Portals. project1 -> ErrorModal.js:32

* useRef() se mai kisi DOM element ka ek reference bana sakta hu.
const ref_name = useRef(initialvalue)
ye initial value ref_name.current.value me initially hogi.
Ab mujhe is ref ko jis bhi DOM element se link karna he usko mai prop dunga ref={ref_name} ka.
ref_name.current uss DOM element ko store karke rakhta he aur ref_name.current.value uss element ki value.
ref_name.current mutable hota he matlab mai .current ko dusri value assign kar sakta hu to wo actual element ki value change kardega but re-render NI karega to wo change dikhega ni (jabki state change function se value change karke re-render karwate the)

IMP - To agr apko kisi DOM element ki value read karni he and write karni he but you dont need a re-render after writing then you can use useRef(). Agr re-render bhi chahiye to simply useState() use karo. project1 -> AddUser.js:11

IMP - useRef can only be used with pre-made HTML elements natively.
useImperativeHandle() hook se mai React function component pe useRef lagwa sakta hu aur us function component ke jo functions chahu (selected) wo bahar use ho payenge. useReducer_Hook_&_Context Login.js & Input.js.

* Effect / Side Effect in React yani sending http requests, storing something in browser storage, creating intervals & timers. These events are such that React doesn't care about. in sab cheezo ke liye useEffect() hook use karte he.

* Agr apne page reload kar diya to state hook wale variables wapis default value pe chale jaenge.

* useEffect(function, [dependencies]) -
ye function component ke 1st render ke BAAD me chalta he fir uske baad jab bhi dependencies change ho tab chalta he.

* Agr useEffect() mai dependencies array diya hi nhi to useEffect ka code hamesha run karega jab component re-render hoga.

* useEffect ki dependencies me mai wo functions and variables ko dal sakta hu jinpe change hone pe mujhe kuch peice of code run karwana he.

* useEffect() ke return me ek function dete he jisse cleanup function kehte he. Login.js:21

* The onBlur event occurs when an object loses focus.

* useReducer wala hook basically complex state management ke liye he, in cases mai useState se code likhna is tough and error-prone. Ex - When we want to update a state based on some other state, there are multiple states involved etc.

Context is a component-wide, behind the scenes, STATE-storage that react manages. Using context we do not need to pass props through a chain of components so that it reaches a target component. We can simply access the state from the Context.

* Agr context state ki value change nai ho rahi to Context_Object.Provider is not required, lekin agr change ho rahi he (which it generally would) then its required.

* Jaise props mai state variables aur functions dono de sakte the bilkul waise hi context object mai bhi variables aur functions dono de sakte he.

* Props use karna tab sahi he jab passed component mai directly us prop ka use ho raha ho, but agr lambi chain of components ban rahi he props ke liye to using context is better.

* Context tab use nai karte jab ek multipurpose component banate he like a button.

* React Context is NOT optimized for high frequency changes.

* React hooks can only be used inside of React Components or custom hooks.